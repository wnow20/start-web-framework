
#user  nobody;
#Defines which Linux system user will own and run the Nginx server

worker_processes  auto;
#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

#error_log  logs/error.log; #error_log  logs/error.log  notice;
#Specifies the file where server logs. 

#pid        logs/nginx.pid;
#nginx will write its master process ID(PID).

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value: 
    # max_clients = worker_processes * worker_connections
}


http {
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block
    #

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it
    
    #tcp_nopush     on;
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

    #keepalive_timeout  0;
    keepalive_timeout  900;
    # timeout during which a keep-alive client connection will stay open.

    #gzip  on;
    # tells the server to use on-the-fly gzip compression.

    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;

    server {
        listen       9000;
        server_name  _;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        
        location ^~/openai/ {
            rewrite ^/openai(/.*)$ $1 break;
            proxy_pass         https://api.openai.com;
            rewrite_log on;
            proxy_set_header Host $host;
            proxy_redirect     off;
        }

        location ^~/aiproxy/ {
            rewrite ^/aiproxy(/.*)$ $1 break;
            proxy_pass         https://open2.aiproxy.xyz;
            rewrite_log on;
            proxy_set_header Host $host;
            proxy_redirect     off;
        }
    }

}
